{"version":3,"sources":["components/Person.js","components/Personform.js","components/Filter.js","services/persons.js","components/Notification.js","components/Alert.js","App.js","index.js"],"names":["Person","person","deletePerson","name","number","onClick","Personform","props","onSubmit","addPerson","value","newName","onChange","handleNameInput","newNumber","handleNumberInput","type","Filter","filter","handleFilterInput","baseUrl","axios","get","newObject","post","id","put","delete","Notification","message","className","Alert","App","useState","persons","setPersons","setNewName","setNewNumber","setFilter","popMessage","setMessage","alertMessage","setAlertMessage","useEffect","personService","then","response","data","findPerson","map","indexOf","personsToShow","toLowerCase","includes","event","target","preventDefault","newPerson","window","confirm","setTimeout","catch","error","n","concat","i","key","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd060f24.chunk.js","sourcesContent":["import React from 'react'\r\n//Yksittäisen henkilön tietojen renderöinti (sekä delete nappi kyseiselle henkilölle)\r\nconst Person = ({person, deletePerson}) => {\r\n    return(\r\n      <li>{person.name} {person.number}\r\n      <button onClick={deletePerson}>Delete</button>\r\n      </li> \r\n    )\r\n  }\r\n\r\n  export default Person","import React from 'react'\r\n//Henkilon lisäys lomakkeen renderöinti\r\nconst Personform = (props) =>{\r\n    return(\r\n      <form onSubmit={props.addPerson}>\r\n          <div>\r\n            name: <input\r\n              value={props.newName}\r\n              onChange={props.handleNameInput}\r\n              />\r\n          </div>\r\n          <div>\r\n            number: <input\r\n              value={props.newNumber}\r\n              onChange={props.handleNumberInput}\r\n              />\r\n          </div>\r\n          <div>\r\n            \r\n            <button type=\"submit\">add</button>\r\n          </div>\r\n        </form>\r\n      \r\n    )\r\n}\r\n\r\nexport default Personform","import React from 'react'\r\n//Filter kentän renderöinti\r\nconst Filter = (props) => {\r\n    return(\r\n      <div>filter: <input\r\n      value = {props.filter}\r\n      onChange={props.handleFilterInput}\r\n      />\r\n     </div>\r\n    )\r\n  }\r\n\r\n  export default Filter","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\nconst del = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\nconst getOne = (id) => {\r\n    return axios.get(`${baseUrl}/${id}`)\r\n}\r\n\r\n\r\nexport default {getAll,create,update,del,getOne\r\n}","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"popup\">\r\n        {message}\r\n      </div>\r\n    )\r\n\r\n  }\r\n  export  default  Notification","import React from 'react'\r\n\r\nconst Alert = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"alert\">\r\n        {message}\r\n      </div>\r\n    )\r\n\r\n  }\r\n  export  default  Alert","import React, { useState, useEffect } from 'react'\nimport Person from './components/Person.js'\nimport Personform from './components/Personform'\nimport Filter from './components/Filter'\nimport personService from './services/persons'\nimport Notification from './components/Notification'\nimport Alert from './components/Alert'\nimport './index.css'\n\n\n\nconst App = () => {\n  //Pohjustetaan useStatet käyttöä varten tyhjiksi\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [popMessage, setMessage] = useState(null)\n  const [alertMessage, setAlertMessage] = useState(null)\n  //Haetaan serveriltä olemassa oleva listaus\n  useEffect(() => {\n    personService\n    .getAll()\n      .then(response => {\n        setPersons(response.data)\n      })\n  }, [])\n  //Henkilön deletointi delete-napin toiminta, ensin deletoidaan ID:n perusteella ja sen jälkeen haetaan serveriltä lista ja päivitetään se näkyviin\n  const deletePerson = (id, person) => {\n    if(window.confirm(`Do you really wanna delete ${person.name}`)){\n    personService\n    .del(id)\n    .then(response=> {\n      personService\n      .getAll()\n        .then(response => {\n          setPersons(response.data)\n          setMessage(\n            `Person '${person.name}' was removed from server`\n          )\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n        })\n    })\n    .catch(error => {\n      alert(\n        `the person was already deleted from server`\n      )\n      setPersons(persons.filter(n => n.id !== id))\n    })}\n  }\n  //Haetaan henkilö nimen perusteella\n  const findPerson = (name) => {\n    return(\n      persons[persons.map((person)=> {return person.name}).indexOf(name)]\n    )\n}\n\n\n  //Henkölin lisäys, add-napin toiminta\n  const addPerson = (event) =>{\n    event.preventDefault()\n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n    //Varmistetaan että samannimistä henkilöä ei ole jo valmiiks\n    if(persons.map((person)=> {return person.name}).includes(newName)){\n      //Jos on samanniminen kysytään halutaanko päivittää numero\n      if (window.confirm(`${newName} is already added to phonebook, do you wanna replace his/her number?`)){\n        personService.update(findPerson(newName).id, newPerson)\n        .then(response => {\n          setPersons(persons.map(person => person.id !== findPerson(newName).id ? person : response.data))\n          setMessage(\n            `Persons '${newPerson.name}' number was updated to server`\n          )\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000)\n        })\n        .catch(error => {\n          setAlertMessage(\n            `information of ${newPerson.name} was already deleted from server`\n          )\n          setTimeout(() => {\n            setAlertMessage(null)\n          }, 5000)\n          setPersons(persons.filter(n => n.id !== findPerson(newName).id))\n        })\n        \n      }\n    }\n    else{\n      personService\n      .create(newPerson)\n      .then(response =>{\n        setPersons(persons.concat(response.data))\n        setMessage(\n          `Person '${newPerson.name}' was added to server`\n        )\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n      })\n  \n    \n  }\n}\n//Handlerit tekstikenttien tekstiä varten, päivitetään relevantit hookit koko ajan kirjoituksen tapahtuessa\n  const handleFilterInput = (event) =>{\n    setFilter(event.target.value)\n  }\n  const handleNameInput = (event) =>{\n    setNewName(event.target.value)\n  }\n  const handleNumberInput =  (event)=>{\n    setNewNumber(event.target.value)\n  }\n  //Filteröidään näytettävien listä filter kentän sisällön perusteella\n  const personsToShow =  persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n\n\n  return (\n    //Appin renderöinti, kutsutaan komponentteja\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={popMessage} />\n      <Alert message={alertMessage} />\n      <Filter filter ={filter} handleFilterInput = {handleFilterInput}/>\n      <Personform addPerson ={addPerson} newName={newName} handleNameInput={handleNameInput} newNumber={newNumber} handleNumberInput={handleNumberInput}/>\n      <h2>Numbers</h2>\n      <ul>\n        {personsToShow.map((person, i)=>\n        <Person key={i} person={person} deletePerson={() => deletePerson(person.id, person)}/>\n\n        )}\n      </ul>\n    </div>\n  )\n\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App/>,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}